        oprater

aretmetic + - * % /

assignment = == !=

comperition < > >= <= ===

logical && ||

softhand  += -= *= %= /=

incriment decriment ++ --

ternery ?: :



veriabels and data types

veriabels

var const let

var = globle redeclerd redefine reasing
var a="aaa";
var a=10;
var is globle

document.write(a);
document.write(a+"<br>"+a);


let one  type of decler reasing but not redecler

let a=10;
consol.log(a);


const = can not change at runtime not reasing and redecler

const a=10;
consol.log(a);



type casting in JS

changing datatype in veriabel
parseint
parsefloat

a=parseint("10");

a=parsefloat("14521.256");



datatype

var a=10 number
let name="aaa"; srting
const age=55;
let age=true; bulion
let bigvalue=1235456789; big intiger

symbol
object


number
let n=45234354243542354;-
consol.log(n);
consol.log(typeof(n));


srting
let a="4524574555";
let a="aaa";
let a='aaa';
let a=`aaa`; (accept line breaks)
consol.log(a);
consol.log(typeof(a));


bulion
let age=true;
let agecheck=false
consol.log(typeof(age));


object
{property:value}
var a={id:101};
var a={id:101,name:"aaa",age:32,salary:555};
consol.log(a);


arrey
var a=["Aaa","asd","xyz"];
consol.log(a);    consider as object


symbol
var a=Symbol("abc xyz");
consol.log(a);


function

function is block of code and it is reusables

builtin 
userdefine

how to call
function call by value
call by reference

normal function

reference
function aaa(fnm)
{
    var firstname="abcd" + fnm;
    consol.log(firstname);
}
aaa("apple");

value
function aaa(fnm)
{
    return fnm;
}
consol.log(aaa("apple"));  terminated


arrow function

var nm=()=>{
    consol.log("apple");
}
nm();

with return
var nm=(fnm)=>{
    return fnm;
}
consol.log(nm("apple"));


statement

we use this to check true or false and continue break statement

2 types of statement
conditionl
where true false we applied conditions
if if else, nested, if elseif, switch case

looping statement
number if itetions repeted again again we applied looping statement
for, nested for, foreach, forof, for in, while, do while

looping control statement
break continue


if 
when condition is true we use if
if(condition)
{
    statement
}

let a=10;
let b=20
if (a>b)
{
    consol.log("a is grater then b");
}


if else
let a=10;
let b=20
if (a>b)
{
    consol.log("a is grater then b");
}
else
{
    consol.log("a is less then b");
}


nested if
var a=10
var b=20
if(a>b);
{
    if(a!=0 && b!=0)
    {
        consol.log("a is grater then b and both are positive value);
    }
}
else
{
    consol.log("a is less then b");
}


if elseif
let a=10;
let b=20
if (a>b)
{
    consol.log("a is grater then b")
}
else if(b>a)
{
    consol.log("b is grater then a")
}
else
{
    consol.log("both are equal")
}


Loop

map
map check each value of arrey


looping control statement

breaK
var i;
for (i=0; i<=10; i++)
{
    if(i==5)
    {
        break;
    }
    consol.log(i);
}

continue THIS SKIP ONE step
var i;
for (i=0; i<=10; i++)
{
    if(i==5)
    if(i==5 || i==9)
    {
        continue;
    }
    consol.log(i);
}

while = when conditionis true
var i=0;
while (i<=10)
{
    consol.log(i);
    i++;
}


do while = one time either condition true or false
var i=0;
do
{
    consol.log(i);
    i++;
}
while(i<=10);


javascript use strict
use strict = we mostly use in react and we use use strict to get all possible error
"use strict"

javascript hoisting
hoisting = declaration of veriabels assingn values befor defiaing

3 type of input in html by js
1 prompt 
2 conform
3 alert

out put methods of js
1 js alert
2 document.write
3 consol.log
4 window.print
    this print any contain of web page
    this can use for print
5 document.getelimentbyid
    this can use with id
6 id.value
7 id.style
8 getelimentbyid.src
9 document.queryselector
    selector = element, id, class
    call id with # calss with . 
10 inner html
11 prompt
12 conform

document.write is give you output like a fresh web page



js events

1 windows events
    on load events
    onload="function name"
2 keyboard events
3 mouse events


onload example

 website = hrms loader gif images
loader apply
    var a;
    function main()
    {
        a=settimeout('display()',3000);
    }

    function display()
    {
        document.getelimentbyid("loader").style.none;
        document.getelimentbyid("main").style="display:block";
    }

direct onload example
window.onload=()>{
    document.getelimentbyid("demo").style="color=blue";
}

on unload event
onunload="display()"



keyboard events
1 onkeydown
2 onkeyup
3 onkeypress


mouse events
1 on change event
2 onhover
3 onmouseout


js validation with regular expretion

make form using bootstrape

give name always

give form name name="nm" in html

search regular experssion in google 
serch as you want

in javascript
function valid()
{
    if (document.nm.name.value=="")
    {
        alert("enter properly")
        document.nm.name.focus();
        return false;
    }
    var nm=[A-Za-z]+$;
    if (!nm.test(document.nm.name.value))
    {
        alert("enter alfabets")
        document.nm.name.focus();
        return false; 
    }
}


what is repl
stands for read evoluate print loop
repl provides in command line
to run write node for shortcut command write .help

node to active repl


Advance javascript

oops
arrow
add event listner
js ajxs
js object
js array and functions
js srting
js to do app create
js dom wob
js promise
js debuger
js error
js exseptions handling
6.1 ecma script

then
react




oops = object orianted programing structure language
used in react js as class base components, advanced js, secured web app created


oops features 
    class
    object
    inheritence
        single, multilevel, multipule
    polymorphism
        method over loading, method overriding
    incapusulations 
    abstractions



class = class is group of member and member function

class can be multipul but object can be one

class classname
{
    member function()
    {
        statement;
    }
}
create the object of class 
call the member function

class abc{
    constroctor(nm)
    {
        this.nm=nm;   this.nm = current object
    }
}
var obj=new abc("abcd"); new is object of class
console.log(obj);



object

object is instance of class  instance=examples
class is blueprint of object
object is always created with new keyword of class

class car{
    constructor(name,year)
    {
        this.name=name;
        this.year=year;
    }
}
var obj=new car('maruti',800)
console.log(obj);



inheritance

class car{
    constructor(name,year)
    {
        this.name=name;
        this.year=year;
    }
}
class room extance car {
    constructor(name,year,rname,add)
    {
        super(name,year)
        this.rname=rname;
        this.add=add;
    }
}
var obj=new room('maruti',800,'abcd','new road')
console.log(obj);



multipiule inheritance
we cannot access 
this is not supported oin js 



polymorphism
poly = many 
make different function to make an application

method overriding method over loading

method over loading
type of polymorphism  
means when we use same function pass with different argument that called method over loading

class add{
    constroctor(a,b,c)
    {
        this.a=a;
        this.b=b;
        this.c=c;
        this.c=a+b;
    }
}

class mult extance add{
    constroctor(a.,b,c,d)
    {
        super(a,b,c);
        this.d=d;
        this.d=a*b*c
    }
}
var obj=new mult(10,20,30)
console.log(obj);


method overriding
pass with same argument

class add{
    constroctor(a,b,c)
    {
        this.a=a;
        this.b=b;
        this.c=c;
        this.c=a+b;
    }
}

class mult extance add{
    constroctor(a.,b,c,d)
    {
        super(a,b,c);
        this.c=c;
        this.c=a*b
    }
}
var obj=new mult(10,20,30)
console.log(obj);


abstractions
data hiding process we hide some data from some users
is never create an object but we acn access abstract class using inheritance
abstract class is not supported in js it is used in type script


abstract class A{
    constroctor(a)
    {
        this.a=a
    }
}



incapsulations
wrapping a data in a single object 
also used to wrap a small objects in a asingle data

set data
get data

class student{
    constroctor()
    {
        var name;
        var mark;
    }
    getname()
    {
        return this.name;
    }
    setname(name)
    {
        this.name=name;
    }

    getmark()
    {
        return this.mark;
    }
    setmark(mark)
    {
        this.mark=mark;
    }
}
var boj=new student();
boj.setname("apple");
boj.setmark(99);
console.log(boj)



srting
set of charactor that inclose within litrels = '', "", `` and instance or object

3 type of srting
litrel constroctor instance

normal

srting as litrel 
var str = "apple"
var str = 'apple'
var str = `apple`
console.log(str)


sring as instance
var name=new srting("apple");
console.log(name);



string templeting
enclose within its support multiline breaks
that writes in ``

string interpolation
is used to print any string templating in side of $(expration)
$() is used in ES6.0(means ecma script)

var str1="apple";
var str2=`orange $(str1)`;
console.log(str2);


string functions 

var str="Appole";
console.log(str);    (res u=is new variable)
upper case = var res=str.toUpperCase   console.log(res)




array and array functions

array is uset to stor multipul data in a single element of variable there we use array

array
var emp=['apple','pineapple'];

array fumction
var emp=['apple','pineapple'];
//var result=emp.forEach(callback function)
emp.forEach(display)
function display(item)
{
    console.log(item);
}
console.log(emp);


concate

var emp1=['apple','pineapple'];
var emp2=['banana','orange'];
var result=emp1.concate(emp2);
console.log(result)


indexof
var emp1=['apple','pineapple'];
var result=emp1.indexof('pineapple',1);
console.log(result);
if (result==1)
{
    console.log('available')
}
else
{
    console.log('not available')
}


push

var emp1=['apple','pineapple'];
var result=emp1.push('orange');
console.log(result);
console.log(emp1);


pop

var emp1=['apple','pineapple'];
var result=emp1.pop();
console.log(result);
console.log(emp1);


reverce

var emp1=['apple','pineapple'];
var result=emp1.reverce();
console.log(result);


filter

var emp1=[12,45,78,2,14,45,18,85,63];
//emp1.filter(callback);
emp1.filter(chk)
function chk(item)
{
    if(item>=18)
    {
        console.log(item)
    }
}



sprade oprater
it can marge multipul array
denoted by ...

var emp1=['apple','guawa'];
var emp2=['banana','orange'];
var emp3=['dates','pineapple'];
var result=[...emp1,...emp2,...emp3];
console.log(result)



rest oprater
denoted by ...
always use as functions in arguments

function nm(...args)
{
    console.log(args);
}
nm('apple',10);



javascript error





App making 

evel function for +-*/



JS ajax
asincrones javascript and xml
used to load data on server without page referesh or load 

asyncrones : used to load data defoult asyncrones
xml : etencible mark up language   it can dynamic load server

always work on server

this is load method

go to jquery.com
go to download 
open Download the uncompressed
copy the linnk
https://code.jquery.com/jquery-3.7.1.js

ajax method


you can find many methods from different websites




React JS

libraeis of js
a produuct of facebook
used to make a web or web site
make dynamik app add remove update edit using api
life cycle of react
    a = initialization
    b = mounting
    c = updating 
    d = unmount

features
    components
    components are reusables
    fast data load on web broweser
    <resct.strict> method to follow strict rules on web broweser
    jsx(javascript xml) to access html eliments in react js
    fragments to access multipiule html eliments
    every tags are paired
    packge and libraeis
    seo frendly web site
    large community


npx =node pakege exucitable

install react js
    1 = download node js and install check node js node -v
    note - node js module is used to install a react js app\
    react js module install = npm install bootstarap
    2 = creat app
    npx creat-react-app appname
    npm creat-react-app appname
    entee name in small latter
    3 = cd appname
    4 = npm start


install react with vite

    1 = install node js
    2 = npm create vite@latest
    3 = write app name
    vite packge is used to create many framework
    4 = select react
    select using arrow key
    5 = select javascript
    6 = cd app name
    7 = install npm install
    8 = npm run dev

to chech react version use npm view react version


file save as jsx in vita app and file svae as js/jsx in npm

npm install animate.css --save


components of React
frugments is access multipul html data
note : default components is always save with index.js, index.jsx, main.jsx
and user define componet are always save with a capital latter ex-App.jsx

    small peace of file that is save with .js and .jsx that is components
    reusable
    use to reuse one componet data to another components
    stored data in objects {}
    access html data using jsx/js
    components access multipul data in jsx formet using  react frugments


types of components 
    twe type of components
    a) function components
        function app()
        {
            return{
                <h1>apple</h1>frugments
            }
        }
    b) class components
        class app extend components{
            render()
            {
                return{
                    <h1>apple</h1>frugments
                }
            }
        }


function base components

html
div id=demo
script type=module src main.jsx


defult.jsx
import employee from './employee'

<employee />


user define
function employee()
(
    return(
        <React.frgmant>
        <div>
        <>
        <h1>ggg</h1>
        </>
        </div>
        </React.frgment>
    )
)
export defult employee




class based components

html
div id=demo
script type=module src main.jsx


defult.jsx
import employee from './employee'

<employee />


user define
imopper react, {componet} from 'react'
class employee extands component
(
    return(
        <React.frgmant>
        <div>
        <>
        <h1>ggg</h1>
        </>
        </div>
        </React.frgment>
    )
)
export defult employee



what is jsx
    javascript xml
    javascript xml stands for javascript extencibal markup language
    jsx used to load html dynamic contain in react


what is frugments
    frugments is used to access multipul html eliments in react js  
    assigne inside of react js



component reuseble function
index
usual things

defoult
usual things
import last data
<data />


user define
create function
create other function
make one more function

return
<>
<app/>
</>
export last 



events use in react



extansen es6
wrute rfc 
modele 5

react styling


type of styling


inline stylesheet
internel stylesheet
external stylesheet

inline stylesheet for css
<div style={{color:"blue",backgroundcolor:"grey"}}></div>


internel stylesheet for css
write internel stylesheet on index.html


external stylesheet
call stylesheet in main.jsx import 'style.css';
for image import const book="image path"; in udf and use {book}
import book from 'image path';


sass

npm i sass for install sass

make a component

make a file style.scss

$text-success:green;
$text-denger:red;
$bg-denger:red;
$max-width:100%;
.app{
    width:$max-width;
}

import sass file in main.jsx 
import './assets/css



bootstrap in react

npm install react-bootstrap bootstarap bootstarap-icons 

import 'bootstarap/dist/css/bootstrap.min.css';
import 'bootstarap/dist/css/bootstrap.min.js';
import 'bootstarap-icon/font/bootstarap-icons.css';

make a component
import { container} from 'react-bootstarap';

icons 
import container
<h1>notifications <span classname="bi bi-bell"></span></h1>


import {container,Row} from react bootstarap
import {Nav, Navbar, NevbarBrand}
import {card, cardheader, cardbody, container, row}
import {container}


portfolio app

npm install animate.css react-bootstarap bootstarap bootstarap-icons

main.jsx 
import 'bootstrap/dist/css/bootstarap.min.css';
bootstarap/dist/js/bootstarap.min.js
bootstarap-icons/font/bootstarap-icons.css

photopea

header
import container row 

Navbar
container


html to jsx for convert code from html to jsx

mdb = material design bootstrape
bootstrap is freamwork of website decining

mdb in reactjs
press get started 
go mdb setup
install = npm i mdb-react-ui-kit
for fortawesome
npm i @fortawesome/fontawesome-free

import this in main.jsx
import 'mdb-react-ui-kit/dist/css/mdb.min.css';
import "@fortawesome/fontawesome-free/css/all.min.css";



tailwind
pre processor of css
framework of css

installtion of tailwind
go to tailwindcss.com

docs
vite
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

go to tailwind.config.js
pest this on content
content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],

go to index.css
@tailwind base;
@tailwind components;
@tailwind utilities;



mui.com
docs


installtion
npm install @mui/material @emotion/react @emotion/styled
npm install @mui/material @mui/styled-engine-sc styled-components
npm install @fontsource/roboto
npm install @mui/icons-material


import 
import '@fontsource/roboto/300.css';
import '@fontsource/roboto/400.css';
import '@fontsource/roboto/500.css';
import '@fontsource/roboto/700.css';


go to useg ijn webdite
